!function(e,i,o){"undefined"!=typeof module&&module.exports?module.exports=o():"function"==typeof define&&define.amd?define(i,o):e[i]=o()}(this,"bowser",function(){var M=!0;function r(o){function e(e){var i=o.match(e);return i&&1<i.length&&i[1]||""}function i(e){var i=o.match(e);return i&&1<i.length&&i[2]||""}var n,t=e(/(ipod|iphone|ipad)/i).toLowerCase(),s=!/like android/i.test(o)&&/android/i.test(o),r=/nexus\s*[0-6]\s*/i.test(o),a=!r&&/nexus\s*[0-9]+/i.test(o),d=/CrOS/.test(o),l=/silk/i.test(o),c=/sailfish/i.test(o),m=/tizen/i.test(o),u=/(web|hpw)(o|0)s/i.test(o),v=/windows phone/i.test(o),f=(/SamsungBrowser/i.test(o),!v&&/windows/i.test(o)),h=!t&&!l&&/macintosh/i.test(o),b=!s&&!c&&!m&&!u&&/linux/i.test(o),p=i(/edg([ea]|ios)\/(\d+(\.\d+)?)/i),g=e(/version\/(\d+(\.\d+)?)/i),w=/tablet/i.test(o)&&!/tablet pc/i.test(o),y=!w&&/[^-]mobi/i.test(o),k=/xbox/i.test(o);/opera/i.test(o)?n={name:"Opera",opera:M,version:g||e(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)}:/opr\/|opios/i.test(o)?n={name:"Opera",opera:M,version:e(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i)||g}:/SamsungBrowser/i.test(o)?n={name:"Samsung Internet for Android",samsungBrowser:M,version:g||e(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)}:/Whale/i.test(o)?n={name:"NAVER Whale browser",whale:M,version:e(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i)}:/MZBrowser/i.test(o)?n={name:"MZ Browser",mzbrowser:M,version:e(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i)}:/coast/i.test(o)?n={name:"Opera Coast",coast:M,version:g||e(/(?:coast)[\s\/](\d+(\.\d+)?)/i)}:/focus/i.test(o)?n={name:"Focus",focus:M,version:e(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i)}:/yabrowser/i.test(o)?n={name:"Yandex Browser",yandexbrowser:M,version:g||e(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)}:/ucbrowser/i.test(o)?n={name:"UC Browser",ucbrowser:M,version:e(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)}:/mxios/i.test(o)?n={name:"Maxthon",maxthon:M,version:e(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)}:/epiphany/i.test(o)?n={name:"Epiphany",epiphany:M,version:e(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)}:/puffin/i.test(o)?n={name:"Puffin",puffin:M,version:e(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)}:/sleipnir/i.test(o)?n={name:"Sleipnir",sleipnir:M,version:e(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)}:/k-meleon/i.test(o)?n={name:"K-Meleon",kMeleon:M,version:e(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)}:v?(n={name:"Windows Phone",osname:"Windows Phone",windowsphone:M},p?(n.msedge=M,n.version=p):(n.msie=M,n.version=e(/iemobile\/(\d+(\.\d+)?)/i))):/msie|trident/i.test(o)?n={name:"Internet Explorer",msie:M,version:e(/(?:msie |rv:)(\d+(\.\d+)?)/i)}:d?n={name:"Chrome",osname:"Chrome OS",chromeos:M,chromeBook:M,chrome:M,version:e(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:/edg([ea]|ios)/i.test(o)?n={name:"Microsoft Edge",msedge:M,version:p}:/vivaldi/i.test(o)?n={name:"Vivaldi",vivaldi:M,version:e(/vivaldi\/(\d+(\.\d+)?)/i)||g}:c?n={name:"Sailfish",osname:"Sailfish OS",sailfish:M,version:e(/sailfish\s?browser\/(\d+(\.\d+)?)/i)}:/seamonkey\//i.test(o)?n={name:"SeaMonkey",seamonkey:M,version:e(/seamonkey\/(\d+(\.\d+)?)/i)}:/firefox|iceweasel|fxios/i.test(o)?(n={name:"Firefox",firefox:M,version:e(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)},/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(o)&&(n.firefoxos=M,n.osname="Firefox OS")):l?n={name:"Amazon Silk",silk:M,version:e(/silk\/(\d+(\.\d+)?)/i)}:/phantom/i.test(o)?n={name:"PhantomJS",phantom:M,version:e(/phantomjs\/(\d+(\.\d+)?)/i)}:/slimerjs/i.test(o)?n={name:"SlimerJS",slimer:M,version:e(/slimerjs\/(\d+(\.\d+)?)/i)}:/blackberry|\bbb\d+/i.test(o)||/rim\stablet/i.test(o)?n={name:"BlackBerry",osname:"BlackBerry OS",blackberry:M,version:g||e(/blackberry[\d]+\/(\d+(\.\d+)?)/i)}:u?(n={name:"WebOS",osname:"WebOS",webos:M,version:g||e(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)},/touchpad\//i.test(o)&&(n.touchpad=M)):/bada/i.test(o)?n={name:"Bada",osname:"Bada",bada:M,version:e(/dolfin\/(\d+(\.\d+)?)/i)}:m?n={name:"Tizen",osname:"Tizen",tizen:M,version:e(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i)||g}:/qupzilla/i.test(o)?n={name:"QupZilla",qupzilla:M,version:e(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i)||g}:/chromium/i.test(o)?n={name:"Chromium",chromium:M,version:e(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i)||g}:/chrome|crios|crmo/i.test(o)?n={name:"Chrome",chrome:M,version:e(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)}:s?n={name:"Android",version:g}:/safari|applewebkit/i.test(o)?(n={name:"Safari",safari:M},g&&(n.version=g)):t?(n={name:"iphone"==t?"iPhone":"ipad"==t?"iPad":"iPod"},g&&(n.version=g)):n=/googlebot/i.test(o)?{name:"Googlebot",googlebot:M,version:e(/googlebot\/(\d+(\.\d+))/i)||g}:{name:e(/^(.*)\/(.*) /),version:i(/^(.*)\/(.*) /)},!n.msedge&&/(apple)?webkit/i.test(o)?(/(apple)?webkit\/537\.36/i.test(o)?(n.name=n.name||"Blink",n.blink=M):(n.name=n.name||"Webkit",n.webkit=M),!n.version&&g&&(n.version=g)):!n.opera&&/gecko\//i.test(o)&&(n.name=n.name||"Gecko",n.gecko=M,n.version=n.version||e(/gecko\/(\d+(\.\d+)?)/i)),n.windowsphone||!s&&!n.silk?!n.windowsphone&&t?(n[t]=M,n.ios=M,n.osname="iOS"):h?(n.mac=M,n.osname="macOS"):k?(n.xbox=M,n.osname="Xbox"):f?(n.windows=M,n.osname="Windows"):b&&(n.linux=M,n.osname="Linux"):(n.android=M,n.osname="Android");var x="";n.windows?x=function(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}}(e(/Windows ((NT|XP)( \d\d?.\d)?)/i)):n.windowsphone?x=e(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i):n.mac?x=(x=e(/Mac OS X (\d+([_\.\s]\d+)*)/i)).replace(/[_\s]/g,"."):t?x=(x=e(/os (\d+([_\s]\d+)*) like mac os x/i)).replace(/[_\s]/g,"."):s?x=e(/android[ \/-](\d+(\.\d+)*)/i):n.webos?x=e(/(?:web|hpw)os\/(\d+(\.\d+)*)/i):n.blackberry?x=e(/rim\stablet\sos\s(\d+(\.\d+)*)/i):n.bada?x=e(/bada\/(\d+(\.\d+)*)/i):n.tizen&&(x=e(/tizen[\/\s](\d+(\.\d+)*)/i)),x&&(n.osversion=x);var S=!n.windows&&x.split(".")[0];return w||a||"ipad"==t||s&&(3==S||4<=S&&!y)||n.silk?n.tablet=M:(y||"iphone"==t||"ipod"==t||s||r||n.blackberry||n.webos||n.bada)&&(n.mobile=M),n.msedge||n.msie&&10<=n.version||n.yandexbrowser&&15<=n.version||n.vivaldi&&1<=n.version||n.chrome&&20<=n.version||n.samsungBrowser&&4<=n.version||n.whale&&1===C([n.version,"1.0"])||n.mzbrowser&&1===C([n.version,"6.0"])||n.focus&&1===C([n.version,"1.0"])||n.firefox&&20<=n.version||n.safari&&6<=n.version||n.opera&&10<=n.version||n.ios&&n.osversion&&6<=n.osversion.split(".")[0]||n.blackberry&&10.1<=n.version||n.chromium&&20<=n.version?n.a=M:n.msie&&n.version<10||n.chrome&&n.version<20||n.firefox&&n.version<20||n.safari&&n.version<6||n.opera&&n.version<10||n.ios&&n.osversion&&n.osversion.split(".")[0]<6||n.chromium&&n.version<20?n.c=M:n.x=M,n}var a=r("undefined"!=typeof navigator&&navigator.userAgent||"");function n(e){return e.split(".").length}function t(e,i){var o,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,i);for(o=0;o<e.length;o++)n.push(i(e[o]));return n}function C(e){for(var o=Math.max(n(e[0]),n(e[1])),i=t(e,function(e){var i=o-n(e);return t((e+=new Array(1+i).join(".0")).split("."),function(e){return new Array(20-e.length).join("0")+e}).reverse()});0<=--o;){if(i[0][o]>i[1][o])return 1;if(i[0][o]!==i[1][o])return-1;if(0===o)return 0}}function s(e,i,o){var n=a;"string"==typeof i&&(o=i,i=void 0),void 0===i&&(i=!1),o&&(n=r(o));var t=""+n.version;for(var s in e)if(e.hasOwnProperty(s)&&n[s]){if("string"!=typeof e[s])throw new Error("Browser version in the minVersion map should be a string: "+s+": "+String(e));return C([t,e[s]])<0}return i}return a.test=function(e){for(var i=0;i<e.length;++i){var o=e[i];if("string"==typeof o&&o in a)return!0}return!1},a.isUnsupportedBrowser=s,a.compareVersions=C,a.check=function(e,i,o){return!s(e,i,o)},a._detect=r,a.detect=r,a}),function(e,i){"object"==typeof exports&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):e.MicroModal=i()}(this,function(){"use strict";function n(e,i){for(var o=0;o<i.length;o++){var n=i[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function y(e){if(Array.isArray(e)){for(var i=0,o=Array(e.length);i<e.length;i++)o[i]=e[i];return o}return Array.from(e)}var e,r,t;function k(e){var i=e.targetModal,o=e.triggers,n=void 0===o?[]:o,t=e.onShow,s=void 0===t?function(){}:t,r=e.onClose,a=void 0===r?function(){}:r,d=e.openTrigger,l=void 0===d?"data-micromodal-trigger":d,c=e.closeTrigger,m=void 0===c?"data-micromodal-close":c,u=e.disableScroll,v=void 0!==u&&u,f=e.disableFocus,h=void 0!==f&&f,b=e.awaitCloseAnimation,p=void 0!==b&&b,g=e.debugMode,w=void 0!==g&&g;!function(e,i){if(!(e instanceof i))throw new TypeError("Cannot call a class as a function")}(this,k),this.modal=document.getElementById(i),this.config={debugMode:w,disableScroll:v,openTrigger:l,closeTrigger:m,onShow:s,onClose:a,awaitCloseAnimation:p,disableFocus:h},0<n.length&&this.registerTriggers.apply(this,y(n)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}function s(e){if(!document.getElementById(e))return console.warn("MicroModal v0.3.1: ❗Seems like you have missed %c'"+e+"'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'+e+'"></div>'),!1}function a(e,i){if(!function(e){if(e.length<=0)console.warn("MicroModal v0.3.1: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>')}(e),!i)return!0;for(var o in i)s(o);return!0}return e=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],function(e,i,o){return i&&n(e.prototype,i),o&&n(e,o),e}(k,[{key:"registerTriggers",value:function(){for(var i=this,e=arguments.length,o=Array(e),n=0;n<e;n++)o[n]=arguments[n];o.forEach(function(e){e.addEventListener("click",function(){return i.showModal()})})}},{key:"showModal",value:function(){this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add("is-open"),this.setFocusToFirstNode(),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.onShow(this.modal)}},{key:"closeModal",value:function(){var i=this.modal;this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement.focus(),this.config.onClose(this.modal),this.config.awaitCloseAnimation?this.modal.addEventListener("animationend",function e(){i.classList.remove("is-open"),i.removeEventListener("animationend",e,!1)},!1):i.classList.remove("is-open")}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var i=document.querySelector("body");switch(e){case"enable":Object.assign(i.style,{overflow:"initial",height:"initial"});break;case"disable":Object.assign(i.style,{overflow:"hidden",height:"100vh"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(e){e.target.hasAttribute(this.config.closeTrigger)&&(this.closeModal(),e.preventDefault())}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.maintainFocus(e)}},{key:"getFocusableNodes",value:function(){var i=this.modal.querySelectorAll(e);return Object.keys(i).map(function(e){return i[e]})}},{key:"setFocusToFirstNode",value:function(){if(!this.config.disableFocus){var e=this.getFocusableNodes();e.length&&e[0].focus()}}},{key:"maintainFocus",value:function(e){var i=this.getFocusableNodes();if(this.modal.contains(document.activeElement)){var o=i.indexOf(document.activeElement);e.shiftKey&&0===o&&(i[i.length-1].focus(),e.preventDefault()),e.shiftKey||o!==i.length-1||(i[0].focus(),e.preventDefault())}else i[0].focus()}}]),r=k,t=null,{init:function(e){var i=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),o=[].concat(y(document.querySelectorAll("["+i.openTrigger+"]"))),n=function(e,o){var n=[];return e.forEach(function(e){var i=e.attributes[o].value;void 0===n[i]&&(n[i]=[]),n[i].push(e)}),n}(o,i.openTrigger);if(!0!==i.debugMode||!1!==a(o,n))for(var t in n){var s=n[t];i.targetModal=t,i.triggers=[].concat(y(s)),new r(i)}},show:function(e,i){var o=i||{};o.targetModal=e,!0===o.debugMode&&!1===s(e)||(t=new r(o)).showModal()},close:function(){t.closeModal()}}}),jQuery(document).ready(function(e){"ontouchstart"in document.documentElement&&e("body").removeClass("no-touch"),bowser.msie&&11==bowser.version?e("body").addClass("ie-11"):bowser.safari&&e("body").addClass("safari"),e(".menu-icon").on("click",function(){e(this).toggleClass("active"),e(".nav--mobile").toggleClass("active")}),e(window).on("resize",function(){1024<e(window).width()&&(e(".menu-icon").removeClass("active"),e(".nav--mobile").removeClass("active"))}),MicroModal.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvd3Nlci5qcyIsIm1pY3JvbW9kYWwuanMiLCJ0aGVtZS5qcyJdLCJuYW1lcyI6WyJyb290IiwibmFtZSIsImRlZmluaXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsInQiLCJkZXRlY3QiLCJ1YSIsImdldEZpcnN0TWF0Y2giLCJyZWdleCIsIm1hdGNoIiwibGVuZ3RoIiwiZ2V0U2Vjb25kTWF0Y2giLCJyZXN1bHQiLCJpb3NkZXZpY2UiLCJ0b0xvd2VyQ2FzZSIsImFuZHJvaWQiLCJ0ZXN0IiwibmV4dXNNb2JpbGUiLCJuZXh1c1RhYmxldCIsImNocm9tZW9zIiwic2lsayIsInNhaWxmaXNoIiwidGl6ZW4iLCJ3ZWJvcyIsIndpbmRvd3NwaG9uZSIsIndpbmRvd3MiLCJtYWMiLCJsaW51eCIsImVkZ2VWZXJzaW9uIiwidmVyc2lvbklkZW50aWZpZXIiLCJ0YWJsZXQiLCJtb2JpbGUiLCJ4Ym94Iiwib3BlcmEiLCJ2ZXJzaW9uIiwic2Ftc3VuZ0Jyb3dzZXIiLCJ3aGFsZSIsIm16YnJvd3NlciIsImNvYXN0IiwiZm9jdXMiLCJ5YW5kZXhicm93c2VyIiwidWNicm93c2VyIiwibWF4dGhvbiIsImVwaXBoYW55IiwicHVmZmluIiwic2xlaXBuaXIiLCJrTWVsZW9uIiwib3NuYW1lIiwibXNlZGdlIiwibXNpZSIsImNocm9tZUJvb2siLCJjaHJvbWUiLCJ2aXZhbGRpIiwic2VhbW9ua2V5IiwiZmlyZWZveCIsImZpcmVmb3hvcyIsInBoYW50b20iLCJzbGltZXIiLCJibGFja2JlcnJ5IiwidG91Y2hwYWQiLCJiYWRhIiwicXVwemlsbGEiLCJjaHJvbWl1bSIsInNhZmFyaSIsImdvb2dsZWJvdCIsImJsaW5rIiwid2Via2l0IiwiZ2Vja28iLCJpb3MiLCJvc1ZlcnNpb24iLCJzIiwiZ2V0V2luZG93c1ZlcnNpb24iLCJyZXBsYWNlIiwib3N2ZXJzaW9uIiwib3NNYWpvclZlcnNpb24iLCJzcGxpdCIsImNvbXBhcmVWZXJzaW9ucyIsImEiLCJjIiwieCIsImJvd3NlciIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImdldFZlcnNpb25QcmVjaXNpb24iLCJtYXAiLCJhcnIiLCJpdGVyYXRvciIsImkiLCJBcnJheSIsInByb3RvdHlwZSIsImNhbGwiLCJwdXNoIiwidmVyc2lvbnMiLCJwcmVjaXNpb24iLCJNYXRoIiwibWF4IiwiY2h1bmtzIiwiZGVsdGEiLCJqb2luIiwiY2h1bmsiLCJyZXZlcnNlIiwiaXNVbnN1cHBvcnRlZEJyb3dzZXIiLCJtaW5WZXJzaW9ucyIsInN0cmljdE1vZGUiLCJfYm93c2VyIiwiYnJvd3NlciIsImhhc093blByb3BlcnR5IiwiRXJyb3IiLCJTdHJpbmciLCJicm93c2VyTGlzdCIsImJyb3dzZXJJdGVtIiwiY2hlY2siLCJfZGV0ZWN0IiwiZ2xvYmFsIiwiZmFjdG9yeSIsIk1pY3JvTW9kYWwiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJ0b0NvbnN1bWFibGVBcnJheSIsImlzQXJyYXkiLCJhcnIyIiwiZnJvbSIsIkZPQ1VTQUJMRV9FTEVNRU5UUyIsIk1vZGFsIiwiYWN0aXZlTW9kYWwiLCJfcmVmIiwidGFyZ2V0TW9kYWwiLCJfcmVmJHRyaWdnZXJzIiwidHJpZ2dlcnMiLCJ1bmRlZmluZWQiLCJfcmVmJG9uU2hvdyIsIm9uU2hvdyIsIl9yZWYkb25DbG9zZSIsIm9uQ2xvc2UiLCJfcmVmJG9wZW5UcmlnZ2VyIiwib3BlblRyaWdnZXIiLCJfcmVmJGNsb3NlVHJpZ2dlciIsImNsb3NlVHJpZ2dlciIsIl9yZWYkZGlzYWJsZVNjcm9sbCIsImRpc2FibGVTY3JvbGwiLCJfcmVmJGRpc2FibGVGb2N1cyIsImRpc2FibGVGb2N1cyIsIl9yZWYkYXdhaXRDbG9zZUFuaW1hdCIsImF3YWl0Q2xvc2VBbmltYXRpb24iLCJfcmVmJGRlYnVnTW9kZSIsImRlYnVnTW9kZSIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJjbGFzc0NhbGxDaGVjayIsIm1vZGFsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImNvbmZpZyIsInJlZ2lzdGVyVHJpZ2dlcnMiLCJhcHBseSIsIm9uQ2xpY2siLCJiaW5kIiwib25LZXlkb3duIiwidmFsaWRhdGVNb2RhbFByZXNlbmNlIiwiaWQiLCJjb25zb2xlIiwid2FybiIsInZhbGlkYXRlQXJncyIsInRyaWdnZXJNYXAiLCJ2YWxpZGF0ZVRyaWdnZXJQcmVzZW5jZSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImNyZWF0ZUNsYXNzIiwidmFsdWUiLCJfdGhpcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJfa2V5IiwiZm9yRWFjaCIsInRyaWdnZXIiLCJhZGRFdmVudExpc3RlbmVyIiwic2hvd01vZGFsIiwiYWN0aXZlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImNsYXNzTGlzdCIsImFkZCIsInNldEZvY3VzVG9GaXJzdE5vZGUiLCJzY3JvbGxCZWhhdmlvdXIiLCJhZGRFdmVudExpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiaGFuZGxlciIsInJlbW92ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b2dnbGUiLCJib2R5IiwicXVlcnlTZWxlY3RvciIsImFzc2lnbiIsInN0eWxlIiwib3ZlcmZsb3ciLCJoZWlnaHQiLCJldmVudCIsImhhc0F0dHJpYnV0ZSIsImNsb3NlTW9kYWwiLCJwcmV2ZW50RGVmYXVsdCIsImtleUNvZGUiLCJtYWludGFpbkZvY3VzIiwibm9kZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwia2V5cyIsImZvY3VzYWJsZU5vZGVzIiwiZ2V0Rm9jdXNhYmxlTm9kZXMiLCJjb250YWlucyIsImZvY3VzZWRJdGVtSW5kZXgiLCJpbmRleE9mIiwic2hpZnRLZXkiLCJpbml0Iiwib3B0aW9ucyIsImNvbmNhdCIsInRyaWdnZXJBdHRyIiwiYXR0cmlidXRlcyIsImdlbmVyYXRlVHJpZ2dlck1hcCIsInNob3ciLCJjbG9zZSIsImpRdWVyeSIsInJlYWR5IiwiJCIsImRvY3VtZW50RWxlbWVudCIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJvbiIsInRvZ2dsZUNsYXNzIiwid2luZG93Iiwid2lkdGgiXSwibWFwcGluZ3MiOiJDQU1BLFNBQUFBLEVBQUFDLEVBQUFDLEdBQ0Esb0JBQUFDLFFBQUFBLE9BQUFDLFFBQUFELE9BQUFDLFFBQUFGLElBQ0EsbUJBQUFHLFFBQUFBLE9BQUFDLElBQUFELE9BQUFKLEVBQUFDLEdBQ0FGLEVBQUFDLEdBQUFDLElBSEEsQ0FJQUssS0FBQSxTQUFBLFdBS0EsSUFBQUMsR0FBQSxFQUVBLFNBQUFDLEVBQUFDLEdBRUEsU0FBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBSCxFQUFBRyxNQUFBRCxHQUNBLE9BQUFDLEdBQUEsRUFBQUEsRUFBQUMsUUFBQUQsRUFBQSxJQUFBLEdBR0EsU0FBQUUsRUFBQUgsR0FDQSxJQUFBQyxFQUFBSCxFQUFBRyxNQUFBRCxHQUNBLE9BQUFDLEdBQUEsRUFBQUEsRUFBQUMsUUFBQUQsRUFBQSxJQUFBLEdBR0EsSUFvQkFHLEVBcEJBQyxFQUFBTixFQUFBLHVCQUFBTyxjQUVBQyxHQURBLGdCQUFBQyxLQUFBVixJQUNBLFdBQUFVLEtBQUFWLEdBQ0FXLEVBQUEsb0JBQUFELEtBQUFWLEdBQ0FZLEdBQUFELEdBQUEsa0JBQUFELEtBQUFWLEdBQ0FhLEVBQUEsT0FBQUgsS0FBQVYsR0FDQWMsRUFBQSxRQUFBSixLQUFBVixHQUNBZSxFQUFBLFlBQUFMLEtBQUFWLEdBQ0FnQixFQUFBLFNBQUFOLEtBQUFWLEdBQ0FpQixFQUFBLG1CQUFBUCxLQUFBVixHQUNBa0IsRUFBQSxpQkFBQVIsS0FBQVYsR0FFQW1CLEdBREEsa0JBQUFULEtBQUFWLElBQ0FrQixHQUFBLFdBQUFSLEtBQUFWLElBQ0FvQixHQUFBYixJQUFBTyxHQUFBLGFBQUFKLEtBQUFWLEdBQ0FxQixHQUFBWixJQUFBTSxJQUFB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LFFBQ0FtTSxFQUFBLFFBQUFHLFNBQUEsU0FDQXhKLE9BQUFqQixRQUNBc0ssRUFBQSxRQUFBRyxTQUFBLFVBSUFILEVBQUEsY0FBQUksR0FBQSxRQUFBLFdBQ0FKLEVBQUFsTyxNQUFBdU8sWUFBQSxVQUNBTCxFQUFBLGdCQUFBSyxZQUFBLFlBR0FMLEVBQUFNLFFBQUFGLEdBQUEsU0FBQSxXQUNBLEtBQUFKLEVBQUFNLFFBQUFDLFVBQ0FQLEVBQUEsY0FBQUUsWUFBQSxVQUNBRixFQUFBLGdCQUFBRSxZQUFBLGFBS0FwSCxXQUFBd0ciLCJmaWxlIjoidGhlbWUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBCb3dzZXIgLSBhIGJyb3dzZXIgZGV0ZWN0b3JcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kZWQvYm93c2VyXG4gKiBNSVQgTGljZW5zZSB8IChjKSBEdXN0aW4gRGlheiAyMDE1XG4gKi9cblxuIWZ1bmN0aW9uIChyb290LCBuYW1lLCBkZWZpbml0aW9uKSB7XG4gIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKVxuICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKG5hbWUsIGRlZmluaXRpb24pXG4gIGVsc2Ugcm9vdFtuYW1lXSA9IGRlZmluaXRpb24oKVxufSh0aGlzLCAnYm93c2VyJywgZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICAqIFNlZSB1c2VyYWdlbnRzLmpzIGZvciBleGFtcGxlcyBvZiBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgKi9cblxuICB2YXIgdCA9IHRydWVcblxuICBmdW5jdGlvbiBkZXRlY3QodWEpIHtcblxuICAgIGZ1bmN0aW9uIGdldEZpcnN0TWF0Y2gocmVnZXgpIHtcbiAgICAgIHZhciBtYXRjaCA9IHVhLm1hdGNoKHJlZ2V4KTtcbiAgICAgIHJldHVybiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaFsxXSkgfHwgJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2Vjb25kTWF0Y2gocmVnZXgpIHtcbiAgICAgIHZhciBtYXRjaCA9IHVhLm1hdGNoKHJlZ2V4KTtcbiAgICAgIHJldHVybiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaFsyXSkgfHwgJyc7XG4gICAgfVxuXG4gICAgdmFyIGlvc2RldmljZSA9IGdldEZpcnN0TWF0Y2goLyhpcG9kfGlwaG9uZXxpcGFkKS9pKS50b0xvd2VyQ2FzZSgpXG4gICAgICAsIGxpa2VBbmRyb2lkID0gL2xpa2UgYW5kcm9pZC9pLnRlc3QodWEpXG4gICAgICAsIGFuZHJvaWQgPSAhbGlrZUFuZHJvaWQgJiYgL2FuZHJvaWQvaS50ZXN0KHVhKVxuICAgICAgLCBuZXh1c01vYmlsZSA9IC9uZXh1c1xccypbMC02XVxccyovaS50ZXN0KHVhKVxuICAgICAgLCBuZXh1c1RhYmxldCA9ICFuZXh1c01vYmlsZSAmJiAvbmV4dXNcXHMqWzAtOV0rL2kudGVzdCh1YSlcbiAgICAgICwgY2hyb21lb3MgPSAvQ3JPUy8udGVzdCh1YSlcbiAgICAgICwgc2lsayA9IC9zaWxrL2kudGVzdCh1YSlcbiAgICAgICwgc2FpbGZpc2ggPSAvc2FpbGZpc2gvaS50ZXN0KHVhKVxuICAgICAgLCB0aXplbiA9IC90aXplbi9pLnRlc3QodWEpXG4gICAgICAsIHdlYm9zID0gLyh3ZWJ8aHB3KShvfDApcy9pLnRlc3QodWEpXG4gICAgICAsIHdpbmRvd3NwaG9uZSA9IC93aW5kb3dzIHBob25lL2kudGVzdCh1YSlcbiAgICAgICwgc2Ftc3VuZ0Jyb3dzZXIgPSAvU2Ftc3VuZ0Jyb3dzZXIvaS50ZXN0KHVhKVxuICAgICAgLCB3aW5kb3dzID0gIXdpbmRvd3NwaG9uZSAmJiAvd2luZG93cy9pLnRlc3QodWEpXG4gICAgICAsIG1hYyA9ICFpb3NkZXZpY2UgJiYgIXNpbGsgJiYgL21hY2ludG9zaC9pLnRlc3QodWEpXG4gICAgICAsIGxpbnV4ID0gIWFuZHJvaWQgJiYgIXNhaWxmaXNoICYmICF0aXplbiAmJiAhd2Vib3MgJiYgL2xpbnV4L2kudGVzdCh1YSlcbiAgICAgICwgZWRnZVZlcnNpb24gPSBnZXRTZWNvbmRNYXRjaCgvZWRnKFtlYV18aW9zKVxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgICwgdmVyc2lvbklkZW50aWZpZXIgPSBnZXRGaXJzdE1hdGNoKC92ZXJzaW9uXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgLCB0YWJsZXQgPSAvdGFibGV0L2kudGVzdCh1YSkgJiYgIS90YWJsZXQgcGMvaS50ZXN0KHVhKVxuICAgICAgLCBtb2JpbGUgPSAhdGFibGV0ICYmIC9bXi1dbW9iaS9pLnRlc3QodWEpXG4gICAgICAsIHhib3ggPSAveGJveC9pLnRlc3QodWEpXG4gICAgICAsIHJlc3VsdFxuXG4gICAgaWYgKC9vcGVyYS9pLnRlc3QodWEpKSB7XG4gICAgICAvLyAgYW4gb2xkIE9wZXJhXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdPcGVyYSdcbiAgICAgICwgb3BlcmE6IHRcbiAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXIgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86b3BlcmF8b3ByfG9waW9zKVtcXHNcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoL29wclxcL3xvcGlvcy9pLnRlc3QodWEpKSB7XG4gICAgICAvLyBhIG5ldyBPcGVyYVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnT3BlcmEnXG4gICAgICAgICwgb3BlcmE6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpvcHJ8b3Bpb3MpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpIHx8IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9TYW1zdW5nQnJvd3Nlci9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkJ1xuICAgICAgICAsIHNhbXN1bmdCcm93c2VyOiB0XG4gICAgICAgICwgdmVyc2lvbjogdmVyc2lvbklkZW50aWZpZXIgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86U2Ftc3VuZ0Jyb3dzZXIpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9XaGFsZS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdOQVZFUiBXaGFsZSBicm93c2VyJ1xuICAgICAgICAsIHdoYWxlOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86d2hhbGUpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL01aQnJvd3Nlci9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdNWiBCcm93c2VyJ1xuICAgICAgICAsIG16YnJvd3NlcjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/Ok1aQnJvd3NlcilbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvY29hc3QvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnT3BlcmEgQ29hc3QnXG4gICAgICAgICwgY29hc3Q6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllciB8fCBnZXRGaXJzdE1hdGNoKC8oPzpjb2FzdClbXFxzXFwvXShcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2ZvY3VzL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0ZvY3VzJ1xuICAgICAgICAsIGZvY3VzOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86Zm9jdXMpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3lhYnJvd3Nlci9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdZYW5kZXggQnJvd3NlcidcbiAgICAgICwgeWFuZGV4YnJvd3NlcjogdFxuICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllciB8fCBnZXRGaXJzdE1hdGNoKC8oPzp5YWJyb3dzZXIpW1xcc1xcL10oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC91Y2Jyb3dzZXIvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgIG5hbWU6ICdVQyBCcm93c2VyJ1xuICAgICAgICAsIHVjYnJvd3NlcjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OnVjYnJvd3NlcilbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvbXhpb3MvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnTWF4dGhvbidcbiAgICAgICAgLCBtYXh0aG9uOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86bXhpb3MpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2VwaXBoYW55L2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0VwaXBoYW55J1xuICAgICAgICAsIGVwaXBoYW55OiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86ZXBpcGhhbnkpW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL3B1ZmZpbi9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdQdWZmaW4nXG4gICAgICAgICwgcHVmZmluOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86cHVmZmluKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9zbGVpcG5pci9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdTbGVpcG5pcidcbiAgICAgICAgLCBzbGVpcG5pcjogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OnNsZWlwbmlyKVtcXHNcXC9dKFxcZCsoPzpcXC5cXGQrKSspL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9rLW1lbGVvbi9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdLLU1lbGVvbidcbiAgICAgICAgLCBrTWVsZW9uOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86ay1tZWxlb24pW1xcc1xcL10oXFxkKyg/OlxcLlxcZCspKykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAod2luZG93c3Bob25lKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdXaW5kb3dzIFBob25lJ1xuICAgICAgLCBvc25hbWU6ICdXaW5kb3dzIFBob25lJ1xuICAgICAgLCB3aW5kb3dzcGhvbmU6IHRcbiAgICAgIH1cbiAgICAgIGlmIChlZGdlVmVyc2lvbikge1xuICAgICAgICByZXN1bHQubXNlZGdlID0gdFxuICAgICAgICByZXN1bHQudmVyc2lvbiA9IGVkZ2VWZXJzaW9uXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmVzdWx0Lm1zaWUgPSB0XG4gICAgICAgIHJlc3VsdC52ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvaWVtb2JpbGVcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9tc2llfHRyaWRlbnQvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnSW50ZXJuZXQgRXhwbG9yZXInXG4gICAgICAsIG1zaWU6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86bXNpZSB8cnY6KShcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNocm9tZW9zKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdDaHJvbWUnXG4gICAgICAsIG9zbmFtZTogJ0Nocm9tZSBPUydcbiAgICAgICwgY2hyb21lb3M6IHRcbiAgICAgICwgY2hyb21lQm9vazogdFxuICAgICAgLCBjaHJvbWU6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21lfGNyaW9zfGNybW8pXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoL2VkZyhbZWFdfGlvcykvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnTWljcm9zb2Z0IEVkZ2UnXG4gICAgICAsIG1zZWRnZTogdFxuICAgICAgLCB2ZXJzaW9uOiBlZGdlVmVyc2lvblxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvdml2YWxkaS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdWaXZhbGRpJ1xuICAgICAgICAsIHZpdmFsZGk6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC92aXZhbGRpXFwvKFxcZCsoXFwuXFxkKyk/KS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChzYWlsZmlzaCkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2FpbGZpc2gnXG4gICAgICAsIG9zbmFtZTogJ1NhaWxmaXNoIE9TJ1xuICAgICAgLCBzYWlsZmlzaDogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9zYWlsZmlzaFxccz9icm93c2VyXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvc2VhbW9ua2V5XFwvL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1NlYU1vbmtleSdcbiAgICAgICwgc2VhbW9ua2V5OiB0XG4gICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goL3NlYW1vbmtleVxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoL2ZpcmVmb3h8aWNld2Vhc2VsfGZ4aW9zL2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ0ZpcmVmb3gnXG4gICAgICAsIGZpcmVmb3g6IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvKD86ZmlyZWZveHxpY2V3ZWFzZWx8Znhpb3MpWyBcXC9dKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgICAgaWYgKC9cXCgobW9iaWxlfHRhYmxldCk7W15cXCldKnJ2OltcXGRcXC5dK1xcKS9pLnRlc3QodWEpKSB7XG4gICAgICAgIHJlc3VsdC5maXJlZm94b3MgPSB0XG4gICAgICAgIHJlc3VsdC5vc25hbWUgPSAnRmlyZWZveCBPUydcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoc2lsaykge1xuICAgICAgcmVzdWx0ID0gIHtcbiAgICAgICAgbmFtZTogJ0FtYXpvbiBTaWxrJ1xuICAgICAgLCBzaWxrOiB0XG4gICAgICAsIHZlcnNpb24gOiBnZXRGaXJzdE1hdGNoKC9zaWxrXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvcGhhbnRvbS9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdQaGFudG9tSlMnXG4gICAgICAsIHBoYW50b206IHRcbiAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvcGhhbnRvbWpzXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvc2xpbWVyanMvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnU2xpbWVySlMnXG4gICAgICAgICwgc2xpbWVyOiB0XG4gICAgICAgICwgdmVyc2lvbjogZ2V0Rmlyc3RNYXRjaCgvc2xpbWVyanNcXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKC9ibGFja2JlcnJ5fFxcYmJiXFxkKy9pLnRlc3QodWEpIHx8IC9yaW1cXHN0YWJsZXQvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQmxhY2tCZXJyeSdcbiAgICAgICwgb3NuYW1lOiAnQmxhY2tCZXJyeSBPUydcbiAgICAgICwgYmxhY2tiZXJyeTogdFxuICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllciB8fCBnZXRGaXJzdE1hdGNoKC9ibGFja2JlcnJ5W1xcZF0rXFwvKFxcZCsoXFwuXFxkKyk/KS9pKVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh3ZWJvcykge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnV2ViT1MnXG4gICAgICAsIG9zbmFtZTogJ1dlYk9TJ1xuICAgICAgLCB3ZWJvczogdFxuICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllciB8fCBnZXRGaXJzdE1hdGNoKC93KD86ZWIpP29zYnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH07XG4gICAgICAvdG91Y2hwYWRcXC8vaS50ZXN0KHVhKSAmJiAocmVzdWx0LnRvdWNocGFkID0gdClcbiAgICB9XG4gICAgZWxzZSBpZiAoL2JhZGEvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQmFkYSdcbiAgICAgICwgb3NuYW1lOiAnQmFkYSdcbiAgICAgICwgYmFkYTogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9kb2xmaW5cXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICh0aXplbikge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnVGl6ZW4nXG4gICAgICAsIG9zbmFtZTogJ1RpemVuJ1xuICAgICAgLCB0aXplbjogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzp0aXplblxccz8pP2Jyb3dzZXJcXC8oXFxkKyhcXC5cXGQrKT8pL2kpIHx8IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9O1xuICAgIH1cbiAgICBlbHNlIGlmICgvcXVwemlsbGEvaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnUXVwWmlsbGEnXG4gICAgICAgICwgcXVwemlsbGE6IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpxdXB6aWxsYSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKykrKS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvY2hyb21pdW0vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQ2hyb21pdW0nXG4gICAgICAgICwgY2hyb21pdW06IHRcbiAgICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC8oPzpjaHJvbWl1bSlbXFxzXFwvXShcXGQrKD86XFwuXFxkKyk/KS9pKSB8fCB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvY2hyb21lfGNyaW9zfGNybW8vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQ2hyb21lJ1xuICAgICAgICAsIGNocm9tZTogdFxuICAgICAgICAsIHZlcnNpb246IGdldEZpcnN0TWF0Y2goLyg/OmNocm9tZXxjcmlvc3xjcm1vKVxcLyhcXGQrKFxcLlxcZCspPykvaSlcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoYW5kcm9pZCkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBuYW1lOiAnQW5kcm9pZCdcbiAgICAgICAgLCB2ZXJzaW9uOiB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgvc2FmYXJpfGFwcGxld2Via2l0L2kudGVzdCh1YSkpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZTogJ1NhZmFyaSdcbiAgICAgICwgc2FmYXJpOiB0XG4gICAgICB9XG4gICAgICBpZiAodmVyc2lvbklkZW50aWZpZXIpIHtcbiAgICAgICAgcmVzdWx0LnZlcnNpb24gPSB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChpb3NkZXZpY2UpIHtcbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgbmFtZSA6IGlvc2RldmljZSA9PSAnaXBob25lJyA/ICdpUGhvbmUnIDogaW9zZGV2aWNlID09ICdpcGFkJyA/ICdpUGFkJyA6ICdpUG9kJ1xuICAgICAgfVxuICAgICAgLy8gV1RGOiB2ZXJzaW9uIGlzIG5vdCBwYXJ0IG9mIHVzZXIgYWdlbnQgaW4gd2ViIGFwcHNcbiAgICAgIGlmICh2ZXJzaW9uSWRlbnRpZmllcikge1xuICAgICAgICByZXN1bHQudmVyc2lvbiA9IHZlcnNpb25JZGVudGlmaWVyXG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYoL2dvb2dsZWJvdC9pLnRlc3QodWEpKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6ICdHb29nbGVib3QnXG4gICAgICAsIGdvb2dsZWJvdDogdFxuICAgICAgLCB2ZXJzaW9uOiBnZXRGaXJzdE1hdGNoKC9nb29nbGVib3RcXC8oXFxkKyhcXC5cXGQrKSkvaSkgfHwgdmVyc2lvbklkZW50aWZpZXJcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6IGdldEZpcnN0TWF0Y2goL14oLiopXFwvKC4qKSAvKSxcbiAgICAgICAgdmVyc2lvbjogZ2V0U2Vjb25kTWF0Y2goL14oLiopXFwvKC4qKSAvKVxuICAgICB9O1xuICAgfVxuXG4gICAgLy8gc2V0IHdlYmtpdCBvciBnZWNrbyBmbGFnIGZvciBicm93c2VycyBiYXNlZCBvbiB0aGVzZSBlbmdpbmVzXG4gICAgaWYgKCFyZXN1bHQubXNlZGdlICYmIC8oYXBwbGUpP3dlYmtpdC9pLnRlc3QodWEpKSB7XG4gICAgICBpZiAoLyhhcHBsZSk/d2Via2l0XFwvNTM3XFwuMzYvaS50ZXN0KHVhKSkge1xuICAgICAgICByZXN1bHQubmFtZSA9IHJlc3VsdC5uYW1lIHx8IFwiQmxpbmtcIlxuICAgICAgICByZXN1bHQuYmxpbmsgPSB0XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQubmFtZSA9IHJlc3VsdC5uYW1lIHx8IFwiV2Via2l0XCJcbiAgICAgICAgcmVzdWx0LndlYmtpdCA9IHRcbiAgICAgIH1cbiAgICAgIGlmICghcmVzdWx0LnZlcnNpb24gJiYgdmVyc2lvbklkZW50aWZpZXIpIHtcbiAgICAgICAgcmVzdWx0LnZlcnNpb24gPSB2ZXJzaW9uSWRlbnRpZmllclxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIXJlc3VsdC5vcGVyYSAmJiAvZ2Vja29cXC8vaS50ZXN0KHVhKSkge1xuICAgICAgcmVzdWx0Lm5hbWUgPSByZXN1bHQubmFtZSB8fCBcIkdlY2tvXCJcbiAgICAgIHJlc3VsdC5nZWNrbyA9IHRcbiAgICAgIHJlc3VsdC52ZXJzaW9uID0gcmVzdWx0LnZlcnNpb24gfHwgZ2V0Rmlyc3RNYXRjaCgvZ2Vja29cXC8oXFxkKyhcXC5cXGQrKT8pL2kpXG4gICAgfVxuXG4gICAgLy8gc2V0IE9TIGZsYWdzIGZvciBwbGF0Zm9ybXMgdGhhdCBoYXZlIG11bHRpcGxlIGJyb3dzZXJzXG4gICAgaWYgKCFyZXN1bHQud2luZG93c3Bob25lICYmIChhbmRyb2lkIHx8IHJlc3VsdC5zaWxrKSkge1xuICAgICAgcmVzdWx0LmFuZHJvaWQgPSB0XG4gICAgICByZXN1bHQub3NuYW1lID0gJ0FuZHJvaWQnXG4gICAgfSBlbHNlIGlmICghcmVzdWx0LndpbmRvd3NwaG9uZSAmJiBpb3NkZXZpY2UpIHtcbiAgICAgIHJlc3VsdFtpb3NkZXZpY2VdID0gdFxuICAgICAgcmVzdWx0LmlvcyA9IHRcbiAgICAgIHJlc3VsdC5vc25hbWUgPSAnaU9TJ1xuICAgIH0gZWxzZSBpZiAobWFjKSB7XG4gICAgICByZXN1bHQubWFjID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdtYWNPUydcbiAgICB9IGVsc2UgaWYgKHhib3gpIHtcbiAgICAgIHJlc3VsdC54Ym94ID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdYYm94J1xuICAgIH0gZWxzZSBpZiAod2luZG93cykge1xuICAgICAgcmVzdWx0LndpbmRvd3MgPSB0XG4gICAgICByZXN1bHQub3NuYW1lID0gJ1dpbmRvd3MnXG4gICAgfSBlbHNlIGlmIChsaW51eCkge1xuICAgICAgcmVzdWx0LmxpbnV4ID0gdFxuICAgICAgcmVzdWx0Lm9zbmFtZSA9ICdMaW51eCdcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRXaW5kb3dzVmVyc2lvbiAocykge1xuICAgICAgc3dpdGNoIChzKSB7XG4gICAgICAgIGNhc2UgJ05UJzogcmV0dXJuICdOVCdcbiAgICAgICAgY2FzZSAnWFAnOiByZXR1cm4gJ1hQJ1xuICAgICAgICBjYXNlICdOVCA1LjAnOiByZXR1cm4gJzIwMDAnXG4gICAgICAgIGNhc2UgJ05UIDUuMSc6IHJldHVybiAnWFAnXG4gICAgICAgIGNhc2UgJ05UIDUuMic6IHJldHVybiAnMjAwMydcbiAgICAgICAgY2FzZSAnTlQgNi4wJzogcmV0dXJuICdWaXN0YSdcbiAgICAgICAgY2FzZSAnTlQgNi4xJzogcmV0dXJuICc3J1xuICAgICAgICBjYXNlICdOVCA2LjInOiByZXR1cm4gJzgnXG4gICAgICAgIGNhc2UgJ05UIDYuMyc6IHJldHVybiAnOC4xJ1xuICAgICAgICBjYXNlICdOVCAxMC4wJzogcmV0dXJuICcxMCdcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9TIHZlcnNpb24gZXh0cmFjdGlvblxuICAgIHZhciBvc1ZlcnNpb24gPSAnJztcbiAgICBpZiAocmVzdWx0LndpbmRvd3MpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldFdpbmRvd3NWZXJzaW9uKGdldEZpcnN0TWF0Y2goL1dpbmRvd3MgKChOVHxYUCkoIFxcZFxcZD8uXFxkKT8pL2kpKVxuICAgIH0gZWxzZSBpZiAocmVzdWx0LndpbmRvd3NwaG9uZSkge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvd2luZG93cyBwaG9uZSAoPzpvcyk/XFxzPyhcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQubWFjKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9NYWMgT1MgWCAoXFxkKyhbX1xcLlxcc11cXGQrKSopL2kpO1xuICAgICAgb3NWZXJzaW9uID0gb3NWZXJzaW9uLnJlcGxhY2UoL1tfXFxzXS9nLCAnLicpO1xuICAgIH0gZWxzZSBpZiAoaW9zZGV2aWNlKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9vcyAoXFxkKyhbX1xcc11cXGQrKSopIGxpa2UgbWFjIG9zIHgvaSk7XG4gICAgICBvc1ZlcnNpb24gPSBvc1ZlcnNpb24ucmVwbGFjZSgvW19cXHNdL2csICcuJyk7XG4gICAgfSBlbHNlIGlmIChhbmRyb2lkKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9hbmRyb2lkWyBcXC8tXShcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQud2Vib3MpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goLyg/OndlYnxocHcpb3NcXC8oXFxkKyhcXC5cXGQrKSopL2kpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0LmJsYWNrYmVycnkpIHtcbiAgICAgIG9zVmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL3JpbVxcc3RhYmxldFxcc29zXFxzKFxcZCsoXFwuXFxkKykqKS9pKTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC5iYWRhKSB7XG4gICAgICBvc1ZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9iYWRhXFwvKFxcZCsoXFwuXFxkKykqKS9pKTtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdC50aXplbikge1xuICAgICAgb3NWZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvdGl6ZW5bXFwvXFxzXShcXGQrKFxcLlxcZCspKikvaSk7XG4gICAgfVxuICAgIGlmIChvc1ZlcnNpb24pIHtcbiAgICAgIHJlc3VsdC5vc3ZlcnNpb24gPSBvc1ZlcnNpb247XG4gICAgfVxuXG4gICAgLy8gZGV2aWNlIHR5cGUgZXh0cmFjdGlvblxuICAgIHZhciBvc01ham9yVmVyc2lvbiA9ICFyZXN1bHQud2luZG93cyAmJiBvc1ZlcnNpb24uc3BsaXQoJy4nKVswXTtcbiAgICBpZiAoXG4gICAgICAgICB0YWJsZXRcbiAgICAgIHx8IG5leHVzVGFibGV0XG4gICAgICB8fCBpb3NkZXZpY2UgPT0gJ2lwYWQnXG4gICAgICB8fCAoYW5kcm9pZCAmJiAob3NNYWpvclZlcnNpb24gPT0gMyB8fCAob3NNYWpvclZlcnNpb24gPj0gNCAmJiAhbW9iaWxlKSkpXG4gICAgICB8fCByZXN1bHQuc2lsa1xuICAgICkge1xuICAgICAgcmVzdWx0LnRhYmxldCA9IHRcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgbW9iaWxlXG4gICAgICB8fCBpb3NkZXZpY2UgPT0gJ2lwaG9uZSdcbiAgICAgIHx8IGlvc2RldmljZSA9PSAnaXBvZCdcbiAgICAgIHx8IGFuZHJvaWRcbiAgICAgIHx8IG5leHVzTW9iaWxlXG4gICAgICB8fCByZXN1bHQuYmxhY2tiZXJyeVxuICAgICAgfHwgcmVzdWx0LndlYm9zXG4gICAgICB8fCByZXN1bHQuYmFkYVxuICAgICkge1xuICAgICAgcmVzdWx0Lm1vYmlsZSA9IHRcbiAgICB9XG5cbiAgICAvLyBHcmFkZWQgQnJvd3NlciBTdXBwb3J0XG4gICAgLy8gaHR0cDovL2RldmVsb3Blci55YWhvby5jb20veXVpL2FydGljbGVzL2dic1xuICAgIGlmIChyZXN1bHQubXNlZGdlIHx8XG4gICAgICAgIChyZXN1bHQubXNpZSAmJiByZXN1bHQudmVyc2lvbiA+PSAxMCkgfHxcbiAgICAgICAgKHJlc3VsdC55YW5kZXhicm93c2VyICYmIHJlc3VsdC52ZXJzaW9uID49IDE1KSB8fFxuXHRcdCAgICAocmVzdWx0LnZpdmFsZGkgJiYgcmVzdWx0LnZlcnNpb24gPj0gMS4wKSB8fFxuICAgICAgICAocmVzdWx0LmNocm9tZSAmJiByZXN1bHQudmVyc2lvbiA+PSAyMCkgfHxcbiAgICAgICAgKHJlc3VsdC5zYW1zdW5nQnJvd3NlciAmJiByZXN1bHQudmVyc2lvbiA+PSA0KSB8fFxuICAgICAgICAocmVzdWx0LndoYWxlICYmIGNvbXBhcmVWZXJzaW9ucyhbcmVzdWx0LnZlcnNpb24sICcxLjAnXSkgPT09IDEpIHx8XG4gICAgICAgIChyZXN1bHQubXpicm93c2VyICYmIGNvbXBhcmVWZXJzaW9ucyhbcmVzdWx0LnZlcnNpb24sICc2LjAnXSkgPT09IDEpIHx8XG4gICAgICAgIChyZXN1bHQuZm9jdXMgJiYgY29tcGFyZVZlcnNpb25zKFtyZXN1bHQudmVyc2lvbiwgJzEuMCddKSA9PT0gMSkgfHxcbiAgICAgICAgKHJlc3VsdC5maXJlZm94ICYmIHJlc3VsdC52ZXJzaW9uID49IDIwLjApIHx8XG4gICAgICAgIChyZXN1bHQuc2FmYXJpICYmIHJlc3VsdC52ZXJzaW9uID49IDYpIHx8XG4gICAgICAgIChyZXN1bHQub3BlcmEgJiYgcmVzdWx0LnZlcnNpb24gPj0gMTAuMCkgfHxcbiAgICAgICAgKHJlc3VsdC5pb3MgJiYgcmVzdWx0Lm9zdmVyc2lvbiAmJiByZXN1bHQub3N2ZXJzaW9uLnNwbGl0KFwiLlwiKVswXSA+PSA2KSB8fFxuICAgICAgICAocmVzdWx0LmJsYWNrYmVycnkgJiYgcmVzdWx0LnZlcnNpb24gPj0gMTAuMSlcbiAgICAgICAgfHwgKHJlc3VsdC5jaHJvbWl1bSAmJiByZXN1bHQudmVyc2lvbiA+PSAyMClcbiAgICAgICAgKSB7XG4gICAgICByZXN1bHQuYSA9IHQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKChyZXN1bHQubXNpZSAmJiByZXN1bHQudmVyc2lvbiA8IDEwKSB8fFxuICAgICAgICAocmVzdWx0LmNocm9tZSAmJiByZXN1bHQudmVyc2lvbiA8IDIwKSB8fFxuICAgICAgICAocmVzdWx0LmZpcmVmb3ggJiYgcmVzdWx0LnZlcnNpb24gPCAyMC4wKSB8fFxuICAgICAgICAocmVzdWx0LnNhZmFyaSAmJiByZXN1bHQudmVyc2lvbiA8IDYpIHx8XG4gICAgICAgIChyZXN1bHQub3BlcmEgJiYgcmVzdWx0LnZlcnNpb24gPCAxMC4wKSB8fFxuICAgICAgICAocmVzdWx0LmlvcyAmJiByZXN1bHQub3N2ZXJzaW9uICYmIHJlc3VsdC5vc3ZlcnNpb24uc3BsaXQoXCIuXCIpWzBdIDwgNilcbiAgICAgICAgfHwgKHJlc3VsdC5jaHJvbWl1bSAmJiByZXN1bHQudmVyc2lvbiA8IDIwKVxuICAgICAgICApIHtcbiAgICAgIHJlc3VsdC5jID0gdFxuICAgIH0gZWxzZSByZXN1bHQueCA9IHRcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIHZhciBib3dzZXIgPSBkZXRlY3QodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgPyBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnIDogJycpXG5cbiAgYm93c2VyLnRlc3QgPSBmdW5jdGlvbiAoYnJvd3Nlckxpc3QpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJyb3dzZXJMaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgYnJvd3Nlckl0ZW0gPSBicm93c2VyTGlzdFtpXTtcbiAgICAgIGlmICh0eXBlb2YgYnJvd3Nlckl0ZW09PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGJyb3dzZXJJdGVtIGluIGJvd3Nlcikge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdmVyc2lvbiBwcmVjaXNpb25zIGNvdW50XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgZ2V0VmVyc2lvblByZWNpc2lvbihcIjEuMTAuM1wiKSAvLyAzXG4gICAqXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdmVyc2lvblxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBmdW5jdGlvbiBnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb24pIHtcbiAgICByZXR1cm4gdmVyc2lvbi5zcGxpdChcIi5cIikubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIEFycmF5OjptYXAgcG9seWZpbGxcbiAgICpcbiAgICogQHBhcmFtICB7QXJyYXl9IGFyclxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gaXRlcmF0b3JcbiAgICogQHJldHVybiB7QXJyYXl9XG4gICAqL1xuICBmdW5jdGlvbiBtYXAoYXJyLCBpdGVyYXRvcikge1xuICAgIHZhciByZXN1bHQgPSBbXSwgaTtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLm1hcCkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChhcnIsIGl0ZXJhdG9yKTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0LnB1c2goaXRlcmF0b3IoYXJyW2ldKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIGJyb3dzZXIgdmVyc2lvbiB3ZWlnaHRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBjb21wYXJlVmVyc2lvbnMoWycxLjEwLjIuMScsICAnMS44LjIuMS45MCddKSAgICAvLyAxXG4gICAqICAgY29tcGFyZVZlcnNpb25zKFsnMS4wMTAuMi4xJywgJzEuMDkuMi4xLjkwJ10pOyAgLy8gMVxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucyhbJzEuMTAuMi4xJywgICcxLjEwLjIuMSddKTsgICAgIC8vIDBcbiAgICogICBjb21wYXJlVmVyc2lvbnMoWycxLjEwLjIuMScsICAnMS4wODAwLjInXSk7ICAgICAvLyAtMVxuICAgKlxuICAgKiBAcGFyYW0gIHtBcnJheTxTdHJpbmc+fSB2ZXJzaW9ucyB2ZXJzaW9ucyB0byBjb21wYXJlXG4gICAqIEByZXR1cm4ge051bWJlcn0gY29tcGFyaXNvbiByZXN1bHRcbiAgICovXG4gIGZ1bmN0aW9uIGNvbXBhcmVWZXJzaW9ucyh2ZXJzaW9ucykge1xuICAgIC8vIDEpIGdldCBjb21tb24gcHJlY2lzaW9uIGZvciBib3RoIHZlcnNpb25zLCBmb3IgZXhhbXBsZSBmb3IgXCIxMC4wXCIgYW5kIFwiOVwiIGl0IHNob3VsZCBiZSAyXG4gICAgdmFyIHByZWNpc2lvbiA9IE1hdGgubWF4KGdldFZlcnNpb25QcmVjaXNpb24odmVyc2lvbnNbMF0pLCBnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb25zWzFdKSk7XG4gICAgdmFyIGNodW5rcyA9IG1hcCh2ZXJzaW9ucywgZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgIHZhciBkZWx0YSA9IHByZWNpc2lvbiAtIGdldFZlcnNpb25QcmVjaXNpb24odmVyc2lvbik7XG5cbiAgICAgIC8vIDIpIFwiOVwiIC0+IFwiOS4wXCIgKGZvciBwcmVjaXNpb24gPSAyKVxuICAgICAgdmVyc2lvbiA9IHZlcnNpb24gKyBuZXcgQXJyYXkoZGVsdGEgKyAxKS5qb2luKFwiLjBcIik7XG5cbiAgICAgIC8vIDMpIFwiOS4wXCIgLT4gW1wiMDAwMDAwMDAwXCJcIiwgXCIwMDAwMDAwMDlcIl1cbiAgICAgIHJldHVybiBtYXAodmVyc2lvbi5zcGxpdChcIi5cIiksIGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IEFycmF5KDIwIC0gY2h1bmsubGVuZ3RoKS5qb2luKFwiMFwiKSArIGNodW5rO1xuICAgICAgfSkucmV2ZXJzZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gaXRlcmF0ZSBpbiByZXZlcnNlIG9yZGVyIGJ5IHJldmVyc2VkIGNodW5rcyBhcnJheVxuICAgIHdoaWxlICgtLXByZWNpc2lvbiA+PSAwKSB7XG4gICAgICAvLyA0KSBjb21wYXJlOiBcIjAwMDAwMDAwOVwiID4gXCIwMDAwMDAwMTBcIiA9IGZhbHNlIChidXQgXCI5XCIgPiBcIjEwXCIgPSB0cnVlKVxuICAgICAgaWYgKGNodW5rc1swXVtwcmVjaXNpb25dID4gY2h1bmtzWzFdW3ByZWNpc2lvbl0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChjaHVua3NbMF1bcHJlY2lzaW9uXSA9PT0gY2h1bmtzWzFdW3ByZWNpc2lvbl0pIHtcbiAgICAgICAgaWYgKHByZWNpc2lvbiA9PT0gMCkge1xuICAgICAgICAgIC8vIGFsbCB2ZXJzaW9uIGNodW5rcyBhcmUgc2FtZVxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBicm93c2VyIGlzIHVuc3VwcG9ydGVkXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqICAgYm93c2VyLmlzVW5zdXBwb3J0ZWRCcm93c2VyKHtcbiAgICogICAgIG1zaWU6IFwiMTBcIixcbiAgICogICAgIGZpcmVmb3g6IFwiMjNcIixcbiAgICogICAgIGNocm9tZTogXCIyOVwiLFxuICAgKiAgICAgc2FmYXJpOiBcIjUuMVwiLFxuICAgKiAgICAgb3BlcmE6IFwiMTZcIixcbiAgICogICAgIHBoYW50b206IFwiNTM0XCJcbiAgICogICB9KTtcbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgbWluVmVyc2lvbnMgbWFwIG9mIG1pbmltYWwgdmVyc2lvbiB0byBicm93c2VyXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IFtzdHJpY3RNb2RlID0gZmFsc2VdIGZsYWcgdG8gcmV0dXJuIGZhbHNlIGlmIGJyb3dzZXIgd2Fzbid0IGZvdW5kIGluIG1hcFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBbdWFdIHVzZXIgYWdlbnQgc3RyaW5nXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBpc1Vuc3VwcG9ydGVkQnJvd3NlcihtaW5WZXJzaW9ucywgc3RyaWN0TW9kZSwgdWEpIHtcbiAgICB2YXIgX2Jvd3NlciA9IGJvd3NlcjtcblxuICAgIC8vIG1ha2Ugc3RyaWN0TW9kZSBwYXJhbSBvcHRpb25hbCB3aXRoIHVhIHBhcmFtIHVzYWdlXG4gICAgaWYgKHR5cGVvZiBzdHJpY3RNb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgdWEgPSBzdHJpY3RNb2RlO1xuICAgICAgc3RyaWN0TW9kZSA9IHZvaWQoMCk7XG4gICAgfVxuXG4gICAgaWYgKHN0cmljdE1vZGUgPT09IHZvaWQoMCkpIHtcbiAgICAgIHN0cmljdE1vZGUgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHVhKSB7XG4gICAgICBfYm93c2VyID0gZGV0ZWN0KHVhKTtcbiAgICB9XG5cbiAgICB2YXIgdmVyc2lvbiA9IFwiXCIgKyBfYm93c2VyLnZlcnNpb247XG4gICAgZm9yICh2YXIgYnJvd3NlciBpbiBtaW5WZXJzaW9ucykge1xuICAgICAgaWYgKG1pblZlcnNpb25zLmhhc093blByb3BlcnR5KGJyb3dzZXIpKSB7XG4gICAgICAgIGlmIChfYm93c2VyW2Jyb3dzZXJdKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBtaW5WZXJzaW9uc1ticm93c2VyXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQnJvd3NlciB2ZXJzaW9uIGluIHRoZSBtaW5WZXJzaW9uIG1hcCBzaG91bGQgYmUgYSBzdHJpbmc6ICcgKyBicm93c2VyICsgJzogJyArIFN0cmluZyhtaW5WZXJzaW9ucykpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGJyb3dzZXIgdmVyc2lvbiBhbmQgbWluIHN1cHBvcnRlZCB2ZXJzaW9uLlxuICAgICAgICAgIHJldHVybiBjb21wYXJlVmVyc2lvbnMoW3ZlcnNpb24sIG1pblZlcnNpb25zW2Jyb3dzZXJdXSkgPCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmljdE1vZGU7IC8vIG5vdCBmb3VuZFxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGJyb3dzZXIgaXMgc3VwcG9ydGVkXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gbWluVmVyc2lvbnMgbWFwIG9mIG1pbmltYWwgdmVyc2lvbiB0byBicm93c2VyXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IFtzdHJpY3RNb2RlID0gZmFsc2VdIGZsYWcgdG8gcmV0dXJuIGZhbHNlIGlmIGJyb3dzZXIgd2Fzbid0IGZvdW5kIGluIG1hcFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9ICBbdWFdIHVzZXIgYWdlbnQgc3RyaW5nXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAqL1xuICBmdW5jdGlvbiBjaGVjayhtaW5WZXJzaW9ucywgc3RyaWN0TW9kZSwgdWEpIHtcbiAgICByZXR1cm4gIWlzVW5zdXBwb3J0ZWRCcm93c2VyKG1pblZlcnNpb25zLCBzdHJpY3RNb2RlLCB1YSk7XG4gIH1cblxuICBib3dzZXIuaXNVbnN1cHBvcnRlZEJyb3dzZXIgPSBpc1Vuc3VwcG9ydGVkQnJvd3NlcjtcbiAgYm93c2VyLmNvbXBhcmVWZXJzaW9ucyA9IGNvbXBhcmVWZXJzaW9ucztcbiAgYm93c2VyLmNoZWNrID0gY2hlY2s7XG5cbiAgLypcbiAgICogU2V0IG91ciBkZXRlY3QgbWV0aG9kIHRvIHRoZSBtYWluIGJvd3NlciBvYmplY3Qgc28gd2UgY2FuXG4gICAqIHJldXNlIGl0IHRvIHRlc3Qgb3RoZXIgdXNlciBhZ2VudHMuXG4gICAqIFRoaXMgaXMgbmVlZGVkIHRvIGltcGxlbWVudCBmdXR1cmUgdGVzdHMuXG4gICAqL1xuICBib3dzZXIuX2RldGVjdCA9IGRldGVjdDtcblxuICAvKlxuICAgKiBTZXQgb3VyIGRldGVjdCBwdWJsaWMgbWV0aG9kIHRvIHRoZSBtYWluIGJvd3NlciBvYmplY3RcbiAgICogVGhpcyBpcyBuZWVkZWQgdG8gaW1wbGVtZW50IGJvd3NlciBpbiBzZXJ2ZXIgc2lkZVxuICAgKi9cbiAgYm93c2VyLmRldGVjdCA9IGRldGVjdDtcbiAgcmV0dXJuIGJvd3NlclxufSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuTWljcm9Nb2RhbCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIHZlcnNpb24gPSBcIjAuMy4xXCI7XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cbnZhciB0b0NvbnN1bWFibGVBcnJheSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShhcnIpO1xuICB9XG59O1xuXG52YXIgTWljcm9Nb2RhbCA9IGZ1bmN0aW9uICgpIHtcblxuICB2YXIgRk9DVVNBQkxFX0VMRU1FTlRTID0gWydhW2hyZWZdJywgJ2FyZWFbaHJlZl0nLCAnaW5wdXQ6bm90KFtkaXNhYmxlZF0pOm5vdChbdHlwZT1cImhpZGRlblwiXSk6bm90KFthcmlhLWhpZGRlbl0pJywgJ3NlbGVjdDpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pJywgJ3RleHRhcmVhOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSknLCAnYnV0dG9uOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSknLCAnaWZyYW1lJywgJ29iamVjdCcsICdlbWJlZCcsICdbY29udGVudGVkaXRhYmxlXScsICdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXhePVwiLVwiXSknXTtcblxuICB2YXIgTW9kYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kYWwoX3JlZikge1xuICAgICAgdmFyIHRhcmdldE1vZGFsID0gX3JlZi50YXJnZXRNb2RhbCxcbiAgICAgICAgICBfcmVmJHRyaWdnZXJzID0gX3JlZi50cmlnZ2VycyxcbiAgICAgICAgICB0cmlnZ2VycyA9IF9yZWYkdHJpZ2dlcnMgPT09IHVuZGVmaW5lZCA/IFtdIDogX3JlZiR0cmlnZ2VycyxcbiAgICAgICAgICBfcmVmJG9uU2hvdyA9IF9yZWYub25TaG93LFxuICAgICAgICAgIG9uU2hvdyA9IF9yZWYkb25TaG93ID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25TaG93LFxuICAgICAgICAgIF9yZWYkb25DbG9zZSA9IF9yZWYub25DbG9zZSxcbiAgICAgICAgICBvbkNsb3NlID0gX3JlZiRvbkNsb3NlID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYkb25DbG9zZSxcbiAgICAgICAgICBfcmVmJG9wZW5UcmlnZ2VyID0gX3JlZi5vcGVuVHJpZ2dlcixcbiAgICAgICAgICBvcGVuVHJpZ2dlciA9IF9yZWYkb3BlblRyaWdnZXIgPT09IHVuZGVmaW5lZCA/ICdkYXRhLW1pY3JvbW9kYWwtdHJpZ2dlcicgOiBfcmVmJG9wZW5UcmlnZ2VyLFxuICAgICAgICAgIF9yZWYkY2xvc2VUcmlnZ2VyID0gX3JlZi5jbG9zZVRyaWdnZXIsXG4gICAgICAgICAgY2xvc2VUcmlnZ2VyID0gX3JlZiRjbG9zZVRyaWdnZXIgPT09IHVuZGVmaW5lZCA/ICdkYXRhLW1pY3JvbW9kYWwtY2xvc2UnIDogX3JlZiRjbG9zZVRyaWdnZXIsXG4gICAgICAgICAgX3JlZiRkaXNhYmxlU2Nyb2xsID0gX3JlZi5kaXNhYmxlU2Nyb2xsLFxuICAgICAgICAgIGRpc2FibGVTY3JvbGwgPSBfcmVmJGRpc2FibGVTY3JvbGwgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRkaXNhYmxlU2Nyb2xsLFxuICAgICAgICAgIF9yZWYkZGlzYWJsZUZvY3VzID0gX3JlZi5kaXNhYmxlRm9jdXMsXG4gICAgICAgICAgZGlzYWJsZUZvY3VzID0gX3JlZiRkaXNhYmxlRm9jdXMgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRkaXNhYmxlRm9jdXMsXG4gICAgICAgICAgX3JlZiRhd2FpdENsb3NlQW5pbWF0ID0gX3JlZi5hd2FpdENsb3NlQW5pbWF0aW9uLFxuICAgICAgICAgIGF3YWl0Q2xvc2VBbmltYXRpb24gPSBfcmVmJGF3YWl0Q2xvc2VBbmltYXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRhd2FpdENsb3NlQW5pbWF0LFxuICAgICAgICAgIF9yZWYkZGVidWdNb2RlID0gX3JlZi5kZWJ1Z01vZGUsXG4gICAgICAgICAgZGVidWdNb2RlID0gX3JlZiRkZWJ1Z01vZGUgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3JlZiRkZWJ1Z01vZGU7XG4gICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBNb2RhbCk7XG5cbiAgICAgIC8vIFNhdmUgYSByZWZlcmVuY2Ugb2YgdGhlIG1vZGFsXG4gICAgICB0aGlzLm1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0TW9kYWwpO1xuXG4gICAgICAvLyBTYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBwYXNzZWQgY29uZmlnXG4gICAgICB0aGlzLmNvbmZpZyA9IHsgZGVidWdNb2RlOiBkZWJ1Z01vZGUsIGRpc2FibGVTY3JvbGw6IGRpc2FibGVTY3JvbGwsIG9wZW5UcmlnZ2VyOiBvcGVuVHJpZ2dlciwgY2xvc2VUcmlnZ2VyOiBjbG9zZVRyaWdnZXIsIG9uU2hvdzogb25TaG93LCBvbkNsb3NlOiBvbkNsb3NlLCBhd2FpdENsb3NlQW5pbWF0aW9uOiBhd2FpdENsb3NlQW5pbWF0aW9uLCBkaXNhYmxlRm9jdXM6IGRpc2FibGVGb2N1c1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIGNsaWNrIGV2ZW50cyBvbmx5IGlmIHByZWJpbmRpbmcgZXZlbnRMaXN0ZW5lcnNcbiAgICAgIH07aWYgKHRyaWdnZXJzLmxlbmd0aCA+IDApIHRoaXMucmVnaXN0ZXJUcmlnZ2Vycy5hcHBseSh0aGlzLCB0b0NvbnN1bWFibGVBcnJheSh0cmlnZ2VycykpO1xuXG4gICAgICAvLyBwcmViaW5kIGZ1bmN0aW9ucyBmb3IgZXZlbnQgbGlzdGVuZXJzXG4gICAgICB0aGlzLm9uQ2xpY2sgPSB0aGlzLm9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICAgIHRoaXMub25LZXlkb3duID0gdGhpcy5vbktleWRvd24uYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb29wcyB0aHJvdWdoIGFsbCBvcGVuVHJpZ2dlcnMgYW5kIGJpbmRzIGNsaWNrIGV2ZW50XG4gICAgICogQHBhcmFtICB7YXJyYXl9IHRyaWdnZXJzIFtBcnJheSBvZiBub2RlIGVsZW1lbnRzXVxuICAgICAqIEByZXR1cm4ge3ZvaWR9XG4gICAgICovXG5cblxuICAgIGNyZWF0ZUNsYXNzKE1vZGFsLCBbe1xuICAgICAga2V5OiAncmVnaXN0ZXJUcmlnZ2VycycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJUcmlnZ2VycygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdHJpZ2dlcnMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICB0cmlnZ2Vyc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgICB0cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNob3dNb2RhbCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdzaG93TW9kYWwnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dNb2RhbCgpIHtcbiAgICAgICAgdGhpcy5hY3RpdmVFbGVtZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5tb2RhbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LmFkZCgnaXMtb3BlbicpO1xuICAgICAgICB0aGlzLnNldEZvY3VzVG9GaXJzdE5vZGUoKTtcbiAgICAgICAgdGhpcy5zY3JvbGxCZWhhdmlvdXIoJ2Rpc2FibGUnKTtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLmNvbmZpZy5vblNob3codGhpcy5tb2RhbCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnY2xvc2VNb2RhbCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VNb2RhbCgpIHtcbiAgICAgICAgdmFyIG1vZGFsID0gdGhpcy5tb2RhbDtcbiAgICAgICAgdGhpcy5tb2RhbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnNjcm9sbEJlaGF2aW91cignZW5hYmxlJyk7XG4gICAgICAgIHRoaXMuYWN0aXZlRWxlbWVudC5mb2N1cygpO1xuICAgICAgICB0aGlzLmNvbmZpZy5vbkNsb3NlKHRoaXMubW9kYWwpO1xuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5hd2FpdENsb3NlQW5pbWF0aW9uKSB7XG4gICAgICAgICAgdGhpcy5tb2RhbC5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgICAgbW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnaXMtb3BlbicpO1xuICAgICAgICAgICAgbW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgaGFuZGxlciwgZmFsc2UpO1xuICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdpcy1vcGVuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdzY3JvbGxCZWhhdmlvdXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNjcm9sbEJlaGF2aW91cih0b2dnbGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5kaXNhYmxlU2Nyb2xsKSByZXR1cm47XG4gICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuICAgICAgICBzd2l0Y2ggKHRvZ2dsZSkge1xuICAgICAgICAgIGNhc2UgJ2VuYWJsZSc6XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGJvZHkuc3R5bGUsIHsgb3ZlcmZsb3c6ICdpbml0aWFsJywgaGVpZ2h0OiAnaW5pdGlhbCcgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdkaXNhYmxlJzpcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYm9keS5zdHlsZSwgeyBvdmVyZmxvdzogJ2hpZGRlbicsIGhlaWdodDogJzEwMHZoJyB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdhZGRFdmVudExpc3RlbmVycycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25DbGljayk7XG4gICAgICAgIHRoaXMubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2spO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleWRvd24pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ3JlbW92ZUV2ZW50TGlzdGVuZXJzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkNsaWNrKTtcbiAgICAgICAgdGhpcy5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljayk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5ZG93bik7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnb25DbGljaycsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0Lmhhc0F0dHJpYnV0ZSh0aGlzLmNvbmZpZy5jbG9zZVRyaWdnZXIpKSB7XG4gICAgICAgICAgdGhpcy5jbG9zZU1vZGFsKCk7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogJ29uS2V5ZG93bicsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gb25LZXlkb3duKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAyNykgdGhpcy5jbG9zZU1vZGFsKGV2ZW50KTtcbiAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDkpIHRoaXMubWFpbnRhaW5Gb2N1cyhldmVudCk7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiAnZ2V0Rm9jdXNhYmxlTm9kZXMnLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZvY3VzYWJsZU5vZGVzKCkge1xuICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3JBbGwoRk9DVVNBQkxFX0VMRU1FTlRTKTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG5vZGVzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIHJldHVybiBub2Rlc1trZXldO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdzZXRGb2N1c1RvRmlyc3ROb2RlJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb2N1c1RvRmlyc3ROb2RlKCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWcuZGlzYWJsZUZvY3VzKSByZXR1cm47XG4gICAgICAgIHZhciBmb2N1c2FibGVOb2RlcyA9IHRoaXMuZ2V0Rm9jdXNhYmxlTm9kZXMoKTtcbiAgICAgICAgaWYgKGZvY3VzYWJsZU5vZGVzLmxlbmd0aCkgZm9jdXNhYmxlTm9kZXNbMF0uZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6ICdtYWludGFpbkZvY3VzJyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYWludGFpbkZvY3VzKGV2ZW50KSB7XG4gICAgICAgIHZhciBmb2N1c2FibGVOb2RlcyA9IHRoaXMuZ2V0Rm9jdXNhYmxlTm9kZXMoKTtcblxuICAgICAgICAvLyBpZiBkaXNhYmxlRm9jdXMgaXMgdHJ1ZVxuICAgICAgICBpZiAoIXRoaXMubW9kYWwuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICBmb2N1c2FibGVOb2Rlc1swXS5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBmb2N1c2VkSXRlbUluZGV4ID0gZm9jdXNhYmxlTm9kZXMuaW5kZXhPZihkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcblxuICAgICAgICAgIGlmIChldmVudC5zaGlmdEtleSAmJiBmb2N1c2VkSXRlbUluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBmb2N1c2FibGVOb2Rlc1tmb2N1c2FibGVOb2Rlcy5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWV2ZW50LnNoaWZ0S2V5ICYmIGZvY3VzZWRJdGVtSW5kZXggPT09IGZvY3VzYWJsZU5vZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGZvY3VzYWJsZU5vZGVzWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gTW9kYWw7XG4gIH0oKTtcblxuICAvKipcbiAgICogTW9kYWwgcHJvdG90eXBlIGVuZHMuXG4gICAqIEhlcmUgb24gY29kZSBpcyByZXBvc2libGUgZm9yIGRldGVjdGluZyBhbmRcbiAgICogYXV0b2JpbmRpbmcgZXZlbnQgaGFuZGxlcnMgb24gbW9kYWwgdHJpZ2dlcnNcbiAgICovXG5cbiAgLy8gS2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgb3BlbmVkIG1vZGFsXG5cblxuICB2YXIgYWN0aXZlTW9kYWwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2YgbW9kYWxzIGFuZCBpdCdzXG4gICAqIHJlc3BlY3RpdmUgdHJpZ2dlcnNcbiAgICogQHBhcmFtICB7YXJyYXl9IHRyaWdnZXJzICAgICBBbiBhcnJheSBvZiBhbGwgdHJpZ2dlcnNcbiAgICogQHBhcmFtICB7c3RyaW5nfSB0cmlnZ2VyQXR0ciBUaGUgZGF0YS1hdHRyaWJ1dGUgd2hpY2ggdHJpZ2dlcnMgdGhlIG1vZHVsZVxuICAgKiBAcmV0dXJuIHthcnJheX1cbiAgICovXG4gIHZhciBnZW5lcmF0ZVRyaWdnZXJNYXAgPSBmdW5jdGlvbiBnZW5lcmF0ZVRyaWdnZXJNYXAodHJpZ2dlcnMsIHRyaWdnZXJBdHRyKSB7XG4gICAgdmFyIHRyaWdnZXJNYXAgPSBbXTtcblxuICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgIHZhciB0YXJnZXRNb2RhbCA9IHRyaWdnZXIuYXR0cmlidXRlc1t0cmlnZ2VyQXR0cl0udmFsdWU7XG4gICAgICBpZiAodHJpZ2dlck1hcFt0YXJnZXRNb2RhbF0gPT09IHVuZGVmaW5lZCkgdHJpZ2dlck1hcFt0YXJnZXRNb2RhbF0gPSBbXTtcbiAgICAgIHRyaWdnZXJNYXBbdGFyZ2V0TW9kYWxdLnB1c2godHJpZ2dlcik7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHJpZ2dlck1hcDtcbiAgfTtcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHdoZXRoZXIgYSBtb2RhbCBvZiB0aGUgZ2l2ZW4gaWQgZXhpc3RzXG4gICAqIGluIHRoZSBET01cbiAgICogQHBhcmFtICB7bnVtYmVyfSBpZCAgVGhlIGlkIG9mIHRoZSBtb2RhbFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgdmFyIHZhbGlkYXRlTW9kYWxQcmVzZW5jZSA9IGZ1bmN0aW9uIHZhbGlkYXRlTW9kYWxQcmVzZW5jZShpZCkge1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ01pY3JvTW9kYWwgdicgKyB2ZXJzaW9uICsgJzogXFx1Mjc1N1NlZW1zIGxpa2UgeW91IGhhdmUgbWlzc2VkICVjXFwnJyArIGlkICsgJ1xcJycsICdiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOWZhO2NvbG9yOiAjNTA1OTZjO2ZvbnQtd2VpZ2h0OiBib2xkOycsICdJRCBzb21ld2hlcmUgaW4geW91ciBjb2RlLiBSZWZlciBleGFtcGxlIGJlbG93IHRvIHJlc29sdmUgaXQuJyk7XG4gICAgICBjb25zb2xlLndhcm4oJyVjRXhhbXBsZTonLCAnYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjlmYTtjb2xvcjogIzUwNTk2Yztmb250LXdlaWdodDogYm9sZDsnLCAnPGRpdiBjbGFzcz1cIm1vZGFsXCIgaWQ9XCInICsgaWQgKyAnXCI+PC9kaXY+Jyk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgaWYgdGhlcmUgYXJlIG1vZGFsIHRyaWdnZXJzIHByZXNlbnRcbiAgICogaW4gdGhlIERPTVxuICAgKiBAcGFyYW0gIHthcnJheX0gdHJpZ2dlcnMgQW4gYXJyYXkgb2YgZGF0YS10cmlnZ2Vyc1xuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgdmFyIHZhbGlkYXRlVHJpZ2dlclByZXNlbmNlID0gZnVuY3Rpb24gdmFsaWRhdGVUcmlnZ2VyUHJlc2VuY2UodHJpZ2dlcnMpIHtcbiAgICBpZiAodHJpZ2dlcnMubGVuZ3RoIDw9IDApIHtcbiAgICAgIGNvbnNvbGUud2FybignTWljcm9Nb2RhbCB2JyArIHZlcnNpb24gKyAnOiBcXHUyNzU3UGxlYXNlIHNwZWNpZnkgYXQgbGVhc3Qgb25lICVjXFwnbWljcm9tb2RhbC10cmlnZ2VyXFwnJywgJ2JhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7JywgJ2RhdGEgYXR0cmlidXRlLicpO1xuICAgICAgY29uc29sZS53YXJuKCclY0V4YW1wbGU6JywgJ2JhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7Y29sb3I6ICM1MDU5NmM7Zm9udC13ZWlnaHQ6IGJvbGQ7JywgJzxhIGhyZWY9XCIjXCIgZGF0YS1taWNyb21vZGFsLXRyaWdnZXI9XCJteS1tb2RhbFwiPjwvYT4nKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0cmlnZ2VycyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBtb2RhbHNcbiAgICogYXJlIHByZXNlbnQgaW4gdGhlIERPTVxuICAgKiBAcGFyYW0gIHthcnJheX0gdHJpZ2dlcnMgICBBcnJheSBvZiBET00gbm9kZXMgd2hpY2ggaGF2ZSBkYXRhLXRyaWdnZXJzXG4gICAqIEBwYXJhbSAge2FycmF5fSB0cmlnZ2VyTWFwIEFzc29jaWF0aXZlIGFycmF5IG9mIG1vZGFscyBhbmQgdGhpZXIgdHJpZ2dlcnNcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIHZhciB2YWxpZGF0ZUFyZ3MgPSBmdW5jdGlvbiB2YWxpZGF0ZUFyZ3ModHJpZ2dlcnMsIHRyaWdnZXJNYXApIHtcbiAgICB2YWxpZGF0ZVRyaWdnZXJQcmVzZW5jZSh0cmlnZ2Vycyk7XG4gICAgaWYgKCF0cmlnZ2VyTWFwKSByZXR1cm4gdHJ1ZTtcbiAgICBmb3IgKHZhciBpZCBpbiB0cmlnZ2VyTWFwKSB7XG4gICAgICB2YWxpZGF0ZU1vZGFsUHJlc2VuY2UoaWQpO1xuICAgIH1yZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogQmluZHMgY2xpY2sgaGFuZGxlcnMgdG8gYWxsIG1vZGFsIHRyaWdnZXJzXG4gICAqIEBwYXJhbSAge29iamVjdH0gY29uZmlnIFtkZXNjcmlwdGlvbl1cbiAgICogQHJldHVybiB2b2lkXG4gICAqL1xuICB2YXIgaW5pdCA9IGZ1bmN0aW9uIGluaXQoY29uZmlnKSB7XG4gICAgLy8gQ3JlYXRlIGFuIGNvbmZpZyBvYmplY3Qgd2l0aCBkZWZhdWx0IG9wZW5UcmlnZ2VyXG4gICAgdmFyIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCB7IG9wZW5UcmlnZ2VyOiAnZGF0YS1taWNyb21vZGFsLXRyaWdnZXInIH0sIGNvbmZpZyk7XG5cbiAgICAvLyBDb2xsZWN0cyBhbGwgdGhlIG5vZGVzIHdpdGggdGhlIHRyaWdnZXJcbiAgICB2YXIgdHJpZ2dlcnMgPSBbXS5jb25jYXQodG9Db25zdW1hYmxlQXJyYXkoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnWycgKyBvcHRpb25zLm9wZW5UcmlnZ2VyICsgJ10nKSkpO1xuXG4gICAgLy8gTWFrZXMgYSBtYXBwaW5ncyBvZiBtb2RhbHMgd2l0aCB0aGVpciB0cmlnZ2VyIG5vZGVzXG4gICAgdmFyIHRyaWdnZXJNYXAgPSBnZW5lcmF0ZVRyaWdnZXJNYXAodHJpZ2dlcnMsIG9wdGlvbnMub3BlblRyaWdnZXIpO1xuXG4gICAgLy8gQ2hlY2tzIGlmIG1vZGFscyBhbmQgdHJpZ2dlcnMgZXhpc3QgaW4gZG9tXG4gICAgaWYgKG9wdGlvbnMuZGVidWdNb2RlID09PSB0cnVlICYmIHZhbGlkYXRlQXJncyh0cmlnZ2VycywgdHJpZ2dlck1hcCkgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAvLyBGb3IgZXZlcnkgdGFyZ2V0IG1vZGFsIGNyZWF0ZXMgYSBuZXcgaW5zdGFuY2VcbiAgICBmb3IgKHZhciBrZXkgaW4gdHJpZ2dlck1hcCkge1xuICAgICAgdmFyIHZhbHVlID0gdHJpZ2dlck1hcFtrZXldO1xuICAgICAgb3B0aW9ucy50YXJnZXRNb2RhbCA9IGtleTtcbiAgICAgIG9wdGlvbnMudHJpZ2dlcnMgPSBbXS5jb25jYXQodG9Db25zdW1hYmxlQXJyYXkodmFsdWUpKTtcbiAgICAgIG5ldyBNb2RhbChvcHRpb25zKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNob3dzIGEgcGFydGljdWxhciBtb2RhbFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRhcmdldE1vZGFsIFtUaGUgaWQgb2YgdGhlIG1vZGFsIHRvIGRpc3BsYXldXG4gICAqIEBwYXJhbSAge29iamVjdH0gY29uZmlnIFtUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdG8gcGFzc11cbiAgICogQHJldHVybiB7dm9pZH1cbiAgICovXG4gIHZhciBzaG93ID0gZnVuY3Rpb24gc2hvdyh0YXJnZXRNb2RhbCwgY29uZmlnKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBjb25maWcgfHwge307XG4gICAgb3B0aW9ucy50YXJnZXRNb2RhbCA9IHRhcmdldE1vZGFsO1xuXG4gICAgLy8gQ2hlY2tzIGlmIG1vZGFscyBhbmQgdHJpZ2dlcnMgZXhpc3QgaW4gZG9tXG4gICAgaWYgKG9wdGlvbnMuZGVidWdNb2RlID09PSB0cnVlICYmIHZhbGlkYXRlTW9kYWxQcmVzZW5jZSh0YXJnZXRNb2RhbCkgPT09IGZhbHNlKSByZXR1cm47XG5cbiAgICAvLyBzdG9yZXMgcmVmZXJlbmNlIHRvIGFjdGl2ZSBtb2RhbFxuICAgIGFjdGl2ZU1vZGFsID0gbmV3IE1vZGFsKG9wdGlvbnMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIGFjdGl2ZU1vZGFsLnNob3dNb2RhbCgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIGFjdGl2ZSBtb2RhbFxuICAgKiBAcmV0dXJuIHt2b2lkfVxuICAgKi9cbiAgdmFyIGNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgYWN0aXZlTW9kYWwuY2xvc2VNb2RhbCgpO1xuICB9O1xuXG4gIHJldHVybiB7IGluaXQ6IGluaXQsIHNob3c6IHNob3csIGNsb3NlOiBjbG9zZSB9O1xufSgpO1xuXG5yZXR1cm4gTWljcm9Nb2RhbDtcblxufSkpKTtcbiIsImpRdWVyeSggZG9jdW1lbnQgKS5yZWFkeShmdW5jdGlvbiggJCApIHtcblx0Ly8gSW5zaWRlIG9mIHRoaXMgZnVuY3Rpb24sICQoKSB3aWxsIHdvcmsgYXMgYW4gYWxpYXMgZm9yIGpRdWVyeSgpXG5cdC8vIGFuZCBvdGhlciBsaWJyYXJpZXMgYWxzbyB1c2luZyAkIHdpbGwgbm90IGJlIGFjY2Vzc2libGUgdW5kZXIgdGhpcyBzaG9ydGN1dFxuXHQvLyBodHRwczovL2NvZGV4LndvcmRwcmVzcy5vcmcvRnVuY3Rpb25fUmVmZXJlbmNlL3dwX2VucXVldWVfc2NyaXB0I2pRdWVyeV9ub0NvbmZsaWN0X1dyYXBwZXJzXG5cblx0Ly8gVG91Y2ggRGV2aWNlIERldGVjdGlvblxuXHR2YXIgaXNUb3VjaERldmljZSA9ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0aWYoIGlzVG91Y2hEZXZpY2UgKSB7XG5cdFx0JCgnYm9keScpLnJlbW92ZUNsYXNzKCduby10b3VjaCcpO1xuXHR9XG5cblx0Ly8gQnJvd3NlciBkZXRlY3Rpb24gdmlhIEJvd3NlciAoaHR0cHM6Ly9naXRodWIuY29tL2xhbmNlZGlrc29uL2Jvd3NlcikgLSBhZGQgZGV0ZWN0aW9uIGFzIG5lZWRlZFxuXHRpZiggYm93c2VyLm1zaWUgJiYgYm93c2VyLnZlcnNpb24gPT0gMTEgKSB7XG5cdFx0JCgnYm9keScpLmFkZENsYXNzKCdpZS0xMScpO1xuXHR9IGVsc2UgaWYgKCBib3dzZXIuc2FmYXJpICkge1xuXHRcdCQoJ2JvZHknKS5hZGRDbGFzcygnc2FmYXJpJyk7XG5cdH1cblxuXHQvLyBNZW51IGZ1bmN0aW9uXG5cdCQoJy5tZW51LWljb24nKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcblx0XHQkKHRoaXMpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcblx0XHQkKCcubmF2LS1tb2JpbGUnKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG5cdH0pO1xuXG5cdCQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24oKSB7XG5cdFx0aWYoICQod2luZG93KS53aWR0aCgpID4gMTAyNCApIHtcblx0XHRcdCQoJy5tZW51LWljb24nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0XHQkKCcubmF2LS1tb2JpbGUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBNb2RhbHNcblx0TWljcm9Nb2RhbC5pbml0KCk7XG5cbn0pO1xuIl19
